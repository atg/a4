%include {
    #import <string>
    #import <cassert>
    
    #import "ast.hpp"
    #import "tokenizer.hpp"
    
    #pragma clang diagnostic push
    #pragma clang diagnostic ignored "-Wunused-parameter"
    
    static std::string ident2string(Token tok) {
        return std::string(tok.payloadStart, tok.payloadEnd);
    }
    
    template <typename T>
    static T unpointer(T* ptr) {
        T val(*ptr);
        delete ptr;
        return val;
    }
    
    template <typename T>
    static std::deque<T> singular(T val) {
        std::deque<T> xs;
        xs.push_back(val);
        return xs;
    }
}

%extra_argument { ParseTree* parsetree }
%token_type { Token }

%syntax_error { fprintf(stderr, "Syntax error at char #%d.\n", parsetree->source_location); }
%parse_failure { fprintf(stderr, "Parser is lost.\n"); }

%left NEWLINE.
%left COLON.
%left ANDAND BARBAR.
%left IN IS EQEQ EXCLAIMEQ LT GT LTEQ GTEQ.
%left ADD MINUS.
%left STAR SLASH MOD.
%right EXCLAIM UNARYMINUS.
%right STARSTAR.
%left DOT.
%left SUBSCRIPT CALL.
%left GROUPING.
%left LAMBDA.

// Types
%right FATARROW ARROW QUESTIONMARK.
%left TYPE_GROUPING.

root ::= decls0(B). { parsetree->decls = *B; }

%type decls0 {std::deque<Decl*>*}
decls0(A) ::= decls(B). { A = B; }
decls0(A) ::= . { A = new std::deque<Decl*>(); }

%type decls {std::deque<Decl*>*}
decls(A) ::= decls(B) NEWLINE decl(C). { A = B; B->push_back(C); }
decls(A) ::= decl(B). { A = new std::deque<Decl*>(); A->push_back(B); }

%type decl {Decl*}

// Function Declaration
decl(A) ::= IDENT(B) LPAREN idents(C) RPAREN EQ expr(D). { A = new FunctionDecl(ident2string(B), C, D); }


%type expr {Expr*}

// Grouping
expr(A) ::= LPAREN expr(B) RPAREN. [GROUPING] { A = B; }

// Subscripting and calls
// expr(A) ::= expr(B) LPAREN exprs(C) RPAREN. [CALL] { A = new CallExpr(B, C); }
// expr(A) ::= expr(B) LPAREN RPAREN. [CALL] { A = new CallExpr(B); }
// expr(A) ::= expr(B) LSQUARE exprs(C) RSQUARE. [SUBSCRIPT] { A = new SubscriptExpr(B, C); }
// expr(A) ::= expr(B) LSQUARE RSQUARE. [SUBSCRIPT] { A = new SubscriptExpr(B); }

// Member
expr(A) ::= expr(B) DOT IDENT(C). { A = new MemberExpr(B, ident2string(C)); }

// Exponentiation
expr(A) ::= expr(B) STARSTAR expr(C). { A = new BinaryExpr(B, OperatorType::Power, C); }

// Unary minus and logical not
expr(A) ::= MINUS expr(B). [UNARYMINUS] { A = new UnaryExpr(B, OperatorType::Negate); }
expr(A) ::= EXCLAIM expr(B). { A = new UnaryExpr(B, OperatorType::LogicalNot); }

// Multiplicative operations
expr(A) ::= expr(B) STAR expr(C). { A = new BinaryExpr(B, OperatorType::Multiply, C); }
expr(A) ::= expr(B) SLASH expr(C). { A = new BinaryExpr(B, OperatorType::Divide, C); }
expr(A) ::= expr(B) MOD expr(C). { A = new BinaryExpr(B, OperatorType::Mod, C); }

// Additive operations
expr(A) ::= expr(B) ADD expr(C). { A = new BinaryExpr(B, OperatorType::Add, C); }
expr(A) ::= expr(B) MINUS expr(C). { A = new BinaryExpr(B, OperatorType::Subtract, C); }

// Shifts (probationary)
// Bitwise operations (probationary)

// Comparisons and tests
expr(A) ::= expr(B) IN expr(C). { A = new BinaryExpr(B, OperatorType::In, C); }
expr(A) ::= expr(B) IS type(C). { A = new IsExpr(B, OperatorType::Is, C); }
expr(A) ::= expr(B) EQEQ expr(C). { A = new BinaryExpr(B, OperatorType::Equals, C); }
expr(A) ::= expr(B) EXCLAIMEQ expr(C). { A = new BinaryExpr(B, OperatorType::NotEqual, C); }
expr(A) ::= expr(B) LT expr(C). { A = new BinaryExpr(B, OperatorType::LessThan, C); }
expr(A) ::= expr(B) GT expr(C). { A = new BinaryExpr(B, OperatorType::GreaterThan, C); }
expr(A) ::= expr(B) LTEQ expr(C). { A = new BinaryExpr(B, OperatorType::LessOrEqual, C); }
expr(A) ::= expr(B) GTEQ expr(C). { A = new BinaryExpr(B, OperatorType::GreaterOrEqual, C); }

// Logical
expr(A) ::= expr(B) ANDAND expr(C). { A = new BinaryExpr(B, OperatorType::LogicalAnd, C); }
expr(A) ::= expr(B) BARBAR expr(C). { A = new BinaryExpr(B, OperatorType::LogicalOr, C); }

// Literals
expr(A) ::= NUMBER(B). { A = static_cast<Expr*>(NumberLiteral::parse(B)); }
expr(A) ::= STRING(B). { A = new StringLiteral(B); }
expr(A) ::= LSQUARE exprs(B) RSQUARE. { A = new ListLiteral(unpointer(B)); }
expr(A) ::= LSQUARE RSQUARE. { A = new ListLiteral(std::deque<Expr*>()); }
expr(A) ::= LCURLY kvpairs(B) RCURLY. { A = new DictLiteral(unpointer(B)); }
expr(A) ::= LCURLY RCURLY. { A = new DictLiteral(std::deque<std::pair<Expr*, Expr*> >()); }
expr(A) ::= IDENT(B) COLON expr(C). { A = new FunctionLiteral(singular(ident2string(B)), C); }
// expr(A) ::= LPAREN idents(B) COLON exprs(C) RPAREN. [LAMBDA] { A = new FunctionLiteral(B, C); }
expr(A) ::= LPAREN exprs(B) COMMA expr(C) RPAREN. { B->push_back(C); A = new TupleLiteral(unpointer(B)); }

expr(A) ::= YES. { A = new BoolLiteral(true); }
expr(A) ::= NO. { A = new BoolLiteral(false); }

%type exprs {std::deque<Expr*>*}
exprs(A) ::= exprs(B) COMMA expr(C). { A = B; B->push_back(C); }
exprs(A) ::= expr(B). { A = new std::deque<Expr*>; A->push_back(B); }


// K/V Pairs
%type kvpairs {std::deque<std::pair<Expr*, Expr*> >*}
kvpairs(A) ::= kvpairs(B) COMMA kvpair(C). { A = B; B->push_back(unpointer(C)); }
kvpairs(A) ::= kvpair(B). { A = new std::deque<std::pair<Expr*, Expr*> >; A->push_back(unpointer(B)); }

%type kvpair {std::pair<Expr*, Expr*>*}
kvpair(A) ::= expr(B) COLON expr(C). { A = new std::pair<Expr*, Expr*>(B, C); }

// Identifiers
%type idents {std::deque<std::string>*}
idents(A) ::= idents(B) COMMA IDENT(C). { A = B; B->push_back(ident2string(C)); }
idents(A) ::= IDENT(B). { A = new std::deque<std::string>; A->push_back(ident2string(B)); }


/********** TYPING **********/
%type type {Type*}
type(A) ::= UPPERIDENT(B). { A = new TypeVariable(ident2string(B)); }
type(A) ::= TITLEIDENT(B). { A = new NamedType(ident2string(B)); }
type(A) ::= LSQUARE type(B) RSQUARE. { A = new ListType(B); }
type(A) ::= type(B) FATARROW type(C). { A = new DictType(B, C); }
type(A) ::= type(B) ARROW type(C). { A = new FunctionType(B, C); }
type(A) ::= LPAREN types(B) COMMA type(C) RPAREN. { B.push_back(C); A = new TupleType(B); }
type(A) ::= type(B) QUESTIONMARK. { A = new OptionalType(B); }
type(A) ::= LPAREN type(B) RPAREN. [TYPE_GROUPING] { A = B; }

%type types {std::deque<Types*>*}
types(A) ::= types(B) COMMA type(C). { A = B; B->push_back(C); }
types(A) ::= type(B). { A = new std::deque<Type*>; A->push_back(B); }


